!function(e){function n(r){if(o[r])return o[r].exports;var t=o[r]={i:r,l:!1,exports:{}};return e[r].call(t.exports,t,t.exports,n),t.l=!0,t.exports}var o={};n.m=e,n.c=o,n.d=function(e,o,r){n.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=0)}([function(module,exports,__webpack_require__){eval(" var app = angular.module('LodashImplementation', [\n     'ngRoute'\n ]);\n\n __webpack_require__(1);\n __webpack_require__(2);\n __webpack_require__(3);\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/app.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/app.js?")},function(module,exports){eval("var myApp = angular.module('LodashImplementation');\nmyApp.controller('headerController', ['$scope', function($scope) {\n    // Options to display in Menu\n    $scope.options = ['Size', 'Includes', 'Shuffle', 'Sample', 'Samplesize'];\n    // Bootstrap code for Hamburger Menu\n    $(document).ready(function() {\n        var trigger = $('.hamburger'),\n            overlay = $('.overlay'),\n            isClosed = false;\n\n        trigger.click(function() {\n            hamburger_cross();\n        });\n\n        $('a[href]').click(function() {\n            $('#wrapper').toggleClass('toggled');\n            hamburger_cross();\n\n        });\n\n        function hamburger_cross() {\n\n            if (isClosed == true) {\n                overlay.hide();\n                trigger.removeClass('is-open');\n                trigger.addClass('is-closed');\n                isClosed = false;\n            } else {\n                overlay.show();\n                trigger.removeClass('is-closed');\n                trigger.addClass('is-open');\n                isClosed = true;\n            }\n        }\n\n        $('[data-toggle=\"offcanvas\"]').click(function() {\n            $('#wrapper').toggleClass('toggled');\n        });\n    })\n}]);\nangular.module('LodashImplementation').component('lodashHeader', {\n    templateUrl: 'app/components/header/header.view.html'\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/components/header/header.component.js\n// module id = 1\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/components/header/header.component.js?")},function(module,exports){eval("var myApp = angular.module('LodashImplementation');\r\nmyApp.controller('methodController', ['$rootScope', '$scope', 'methodService', function($rootScope, $scope, MethodService) {\r\n    // Getting method name and executing method\r\n    var methodName = window.location.href.substr(window.location.href.lastIndexOf('/') + 1);\r\n    if (methodName) {\r\n        $rootScope.$broadcast('method-changed', {\r\n            methodName: methodName\r\n        });\r\n    }\r\n    $scope.methodModel = MethodService.getMethodModel();\r\n    $scope.checkValue = function(value) {\r\n        var inputs;\r\n        try {\r\n            eval('inputs=' + value);\r\n        } catch (err) {\r\n            inputs = value;\r\n        }\r\n        return inputs;\r\n    }\r\n    $scope.callMethod = function() {\r\n            var inputs, outputResult;\r\n            $scope.invalidInput = false;\r\n            if ($scope.methodModel.name === 'Includes') {\r\n                $scope.collection = $scope.checkValue(document.getElementById('collection').value);\r\n                $scope.value = $scope.checkValue(document.getElementById('value').value);\r\n                $scope.index = $scope.checkValue(document.getElementById('index').value);\r\n                outputResult = myLodash[$scope.methodModel.name]($scope.collection, $scope.value, $scope.index);\r\n            } else if ($scope.methodModel.name === 'Samplesize') {\r\n                $scope.collection = $scope.checkValue(document.getElementById('collection').value);\r\n                $scope.value = $scope.checkValue(document.getElementById('value').value);\r\n                outputResult = myLodash[$scope.methodModel.name]($scope.collection, $scope.value);\r\n            } else {\r\n                $scope.collection = $scope.checkValue(document.getElementById('myTextarea').value);\r\n                outputResult = myLodash[$scope.methodModel.name]($scope.collection);\r\n            }\r\n            $scope.myInputs = inputs;\r\n            $scope.outputResult = outputResult;\r\n            if (outputResult === undefined) {\r\n                $scope.invalidInput = true;\r\n            }\r\n            $scope.showChart();\r\n        }\r\n        // Static Data for methods and their description\r\n    $scope.methods = [{\r\n            name: 'Sample',\r\n            description: 'Gets a random element from collection.',\r\n            arguments: 'collection (Array|Object): The collection to sample.'\r\n        },\r\n        {\r\n            name: 'Samplesize',\r\n            description: 'Gets n random elements at unique keys from collection up to the size of collection.',\r\n            arguments: `collection (Array|Object): The collection to sample.\r\n            [n=1] (number): The number of elements to sample.`\r\n        },\r\n        {\r\n            name: 'Size',\r\n            description: 'Gets the size of collection by returning its length for array-like values or the number of own enumerable string keyed properties for objects.',\r\n            arguments: 'collection (Array|Object|string): The collection to inspect.'\r\n        },\r\n        {\r\n            name: 'Shuffle',\r\n            description: 'Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.',\r\n            arguments: 'collection (Array|Object): The collection to shuffle.'\r\n        },\r\n        {\r\n            name: 'Includes',\r\n            description: 'Checks if value is in collection. If collection is a string, it\\'s checked for a substring of value, otherwise SameValueZero is used for equality comparisons. If fromIndex is negative, it\\'s used as the offset from the end of collection.',\r\n            arguments: `collection (Array|Object|string): The collection to inspect.\r\n            value( * ): The value to search\r\n            for.\r\n            [fromIndex = 0](number): The index to search from.\r\n            `\r\n        },\r\n\r\n    ];\r\n    // High charts code for showing flowchart\r\n    $scope.showChart = function() {\r\n            if ($scope.outputResult) {\r\n                Highcharts.chart('chartContainer', {\r\n                    chart: {\r\n                        backgroundColor: 'white',\r\n                        events: {\r\n                            load: function() {\r\n\r\n                                // Draw the flow chart\r\n                                var ren = this.renderer,\r\n                                    colors = Highcharts.getOptions().colors,\r\n                                    rightArrow = ['M', 0, 0, 'L', 100, 0, 'L', 95, 5, 'M', 100, 0, 'L', 95, -5],\r\n                                    leftArrow = ['M', 100, 0, 'L', 0, 0, 'L', 5, 5, 'M', 0, 0, 'L', 5, -5];\r\n\r\n                                // Headers\r\n                                ren.label('Input', 100, 40)\r\n                                    .css({\r\n                                        fontWeight: 'bold'\r\n                                    })\r\n                                    .add();\r\n                                ren.label('Output', 280, 40)\r\n                                    .css({\r\n                                        fontWeight: 'bold'\r\n                                    })\r\n                                    .add();\r\n\r\n                                // myInputs label\r\n                                ren.label($scope.collection, 50, 82)\r\n                                    .attr({\r\n                                        fill: colors[0],\r\n                                        r: 5\r\n                                    })\r\n                                    .css({\r\n                                        color: 'white'\r\n                                    })\r\n                                    .add()\r\n                                    .shadow(true);\r\n\r\n                                ren.path(rightArrow)\r\n                                    .attr({\r\n                                        'stroke-width': 2,\r\n                                        stroke: colors[3]\r\n                                    })\r\n                                    .translate(160, 95)\r\n                                    .add();\r\n\r\n                                ren.label('Execute', 180, 60)\r\n                                    .css({\r\n                                        fontSize: '10px',\r\n                                        color: colors[3]\r\n                                    })\r\n                                    .add();\r\n\r\n                                ren.label($scope.outputResult, 280, 82)\r\n                                    .attr({\r\n                                        r: 5,\r\n                                        width: 100,\r\n                                        fill: colors[1]\r\n                                    })\r\n                                    .css({\r\n                                        color: 'white',\r\n                                        fontWeight: 'bold'\r\n                                    })\r\n                                    .add();\r\n                            }\r\n                        }\r\n                    },\r\n                    title: {\r\n                        text: 'Lodash Method ' + $scope.methodModel.name + ' Input/Output',\r\n                        style: {\r\n                            color: 'black'\r\n                        }\r\n                    }\r\n\r\n\r\n                });\r\n            } else {\r\n                Highcharts.chart('chartContainer', {}).destroy();\r\n            }\r\n        }\r\n        // Listener for event broadcasted and make a model to render in view\r\n    if (!$rootScope.$$listenerCount['method-changed']) {\r\n        $scope.$on('method-changed', function(event, args) {\r\n            var anyThing = args.methodName;\r\n            $scope.methods.forEach(function(element) {\r\n                if (element.name === anyThing) {\r\n                    $scope.tempModel = {};\r\n                    $scope.tempModel['name'] = element.name;\r\n                    $scope.tempModel['description'] = element.description;\r\n                    $scope.tempModel['args'] = element.arguments;\r\n                    MethodService.saveMethodModel($scope.tempModel);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}]);\r\nmyApp.factory('methodService', ['$rootScope', function($rootScope) {\r\n    var methodModel = {};\r\n    return {\r\n        saveMethodModel: function(data) {\r\n            methodModel = data;\r\n        },\r\n        getMethodModel: function() {\r\n            return methodModel;\r\n        }\r\n    };\r\n}]);\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/components/method/method.controller.js\n// module id = 2\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/components/method/method.controller.js?")},function(module,exports,__webpack_require__){"use strict";eval("\n\nangular.module('LodashImplementation')\n    .config(['$routeProvider', function($routeProvider) {\n        $routeProvider\n            .when('/', {\n                templateUrl: 'app/components/home/home.view.html'\n            })\n            .when('/Size', {\n                controller: 'methodController',\n                templateUrl: 'app/components/method/method.view.html'\n            })\n            .when('/Shuffle', {\n                controller: 'methodController',\n                templateUrl: 'app/components/method/method.view.html'\n            })\n            .when('/Includes', {\n                controller: 'methodController',\n                templateUrl: 'app/components/method/method.view.html'\n            })\n            .when('/Sample', {\n                controller: 'methodController',\n                templateUrl: 'app/components/method/method.view.html'\n            })\n            .when('/Samplesize', {\n                controller: 'methodController',\n                templateUrl: 'app/components/method/method.view.html'\n            })\n    }]);\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/app.routes.js\n// module id = 3\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/app.routes.js?")}]);